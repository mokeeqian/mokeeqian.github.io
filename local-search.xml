<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Trie前缀树的实现</title>
    <link href="/2022/05/16/Trie%E5%89%8D%E7%BC%80%E6%A0%91%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/05/16/Trie%E5%89%8D%E7%BC%80%E6%A0%91%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<!-- # Trie前缀树的实现 --><h2 id="介绍">介绍</h2><p><span class="math inline">\(Trie\)</span> 树，又叫 <spanclass="math inline">\(\lceil\)</span> 前缀树 <spanclass="math inline">\(\rfloor\)</span>、<spanclass="math inline">\(\lceil\)</span> 字典树 <spanclass="math inline">\(\rfloor\)</span>，是一种多叉树，用来进行快速前缀匹配的一种数据结构。</p><p>与一般多叉树不同的是，</p><ul><li><span class="math inline">\(Trie\)</span>的节点不存储节点信息，仅仅存放一个标记位 <spanclass="math inline">\(isEnd\)</span>，用来标记当前节点是否是路径的终点，即从 <spanclass="math inline">\(root\)</span> 到当前节点是一个单词。</li><li><span class="math inline">\(Trie\)</span>的节点信息存放在树枝中。</li></ul><h2 id="应用">应用</h2><ul><li>前缀匹配</li><li>单词补全</li><li>单词纠错</li></ul><h2 id="实现">实现</h2><ol type="1"><li><p><span class="math inline">\(Trie\)</span> 节点定义<figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieNode</span> &#123;<br>    <span class="hljs-type">boolean</span> isEnd;          <span class="hljs-comment">// 是否是单词结尾</span><br>    TrieNode[] children;     <span class="hljs-comment">// 26叉树</span><br>    TrieNode() &#123;<br>        isEnd = <span class="hljs-literal">false</span>;<br>        children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieNode</span>[<span class="hljs-number">26</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p></li><li><p><span class="math inline">\(Trie\)</span> 建立</p><p>对于给定的字符串 <spanclass="math inline">\(word\)</span>，遍历其每个字符，一次在 <spanclass="math inline">\(Trie\)</span> 中检查其是否存在，</p><ul><li>如果存在，则继续往下查找；</li><li>如果不存在，则在对应分支上创建节点，继续往下查找。直至遍历完 <spanclass="math inline">\(word\)</span></li></ul><p>最后，置 <spanclass="math inline">\(isEnd=true\)</span>，表示以该节点为结尾的字符串是一个完整的单词<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String word)</span> &#123;<br>    <span class="hljs-type">TrieNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> root;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++ ) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> word.charAt(i)-<span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> ( p.children[idx] == <span class="hljs-literal">null</span> ) &#123;<br>            <span class="hljs-comment">// 新建节点</span><br>            p.children[idx] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieNode</span>();<br>        &#125;<br>        <span class="hljs-comment">// 往下迭代</span><br>        p = p.children[idx];<br>    &#125;<br>    <span class="hljs-comment">// 标记为单词结尾</span><br>    p.isEnd = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>查找整个字符串 <span class="math inline">\(word\)</span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String word)</span> &#123;<br>    <span class="hljs-type">TrieNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> root;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++ ) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> word.charAt(i)-<span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> ( p.children[idx] == <span class="hljs-literal">null</span> ) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        p = p.children[idx];<br>    &#125;<br>    <span class="hljs-comment">// 如果word最后一个字符是单词结尾，则查找成功；否则，word只是trie中的一个前缀</span><br>    <span class="hljs-keyword">return</span> p.isEnd;<br>&#125;   <br></code></pre></td></tr></table></figure></p></li><li><p>查找前缀 <span class="math inline">\(prefix\)</span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startsWith</span><span class="hljs-params">(String prefix)</span> &#123;<br>    <span class="hljs-type">TrieNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> root;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; prefix.length(); i++ ) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> prefix.charAt(i)-<span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> ( p.children[idx] == <span class="hljs-literal">null</span> ) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        p = p.children[idx];<br>    &#125;<br>    <span class="hljs-comment">// 查找到prefix，说明trie中肯定存在以prefix为前缀的单词</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;   <br></code></pre></td></tr></table></figure></p></li><li><p>完整代码 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieNode</span> &#123;<br>    <span class="hljs-type">boolean</span> isEnd;          <span class="hljs-comment">// 是否是单词结尾</span><br>    TrieNode[] children;     <span class="hljs-comment">// 26叉树</span><br>    TrieNode() &#123;<br>        isEnd = <span class="hljs-literal">false</span>;<br>        children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieNode</span>[<span class="hljs-number">26</span>];<br>    &#125;<br>&#125;    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br>    <span class="hljs-comment">// trie树，边存放字符信息，节点标记是否是单词结尾，及后续字符是什么</span><br>    TrieNode root;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Trie</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieNode</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String word)</span> &#123;<br>        <span class="hljs-type">TrieNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++ ) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> word.charAt(i)-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span> ( p.children[idx] == <span class="hljs-literal">null</span> ) &#123;<br>                <span class="hljs-comment">// 新建节点</span><br>                p.children[idx] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieNode</span>();<br>            &#125;<br>            <span class="hljs-comment">// 往下迭代</span><br>            p = p.children[idx];<br>        &#125;<br>        <span class="hljs-comment">// 标记为单词结尾</span><br>        p.isEnd = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String word)</span> &#123;<br>        <span class="hljs-type">TrieNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++ ) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> word.charAt(i)-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span> ( p.children[idx] == <span class="hljs-literal">null</span> ) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            p = p.children[idx];<br>        &#125;<br>        <span class="hljs-comment">// 如果word最后一个字符是单词结尾，则查找成功；否则，word只是trie中的一个前缀</span><br>        <span class="hljs-keyword">return</span> p.isEnd;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startsWith</span><span class="hljs-params">(String prefix)</span> &#123;<br>        <span class="hljs-type">TrieNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; prefix.length(); i++ ) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> prefix.charAt(i)-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span> ( p.children[idx] == <span class="hljs-literal">null</span> ) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            p = p.children[idx];<br>        &#125;<br>        <span class="hljs-comment">// 查找到prefix，说明trie中肯定存在以prefix为前缀的单词</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;    <br></code></pre></td></tr></table></figure></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>前缀树</tag>
      
      <tag>Trie</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/16/hello-world/"/>
    <url>/2022/05/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
